// nonWF model to examine life stage effects on MHC I and MHC II population genetics
// eventually adding community assemblage complexity

// if each tick isn't a year, need to add modulo/phase adjustment

// set up a simple neutral nonWF simulation
initialize() {
	initializeSLiMModelType("nonWF");
	defineConstant("K", 100);	// carrying capacity
	// defineConstant("E", 0.8) //community evenness
	// defineConstant("R", 0.1) // proportion of reservoir species
	//defineConstant("L", c(0.7, 0.0, 0.0, 0.0, 0.25, 0.5, 0.75, 1.0)); // life table for age-based mortality
	
	// neutral mutations, which are allowed to fix
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
	// beneficial mutations, which are allowed to fix
	initializeMutationType("m2", 0.5, "e", 0.1);
	m1.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElementType("g2", m2, 1.0);
	initializeGenomicElement(g1, 0,19999);
	initializeGenomicElement(g2, 20000,39999);
	initializeGenomicElement(g1, 40000,59999);
	initializeGenomicElement(g2, 60000,79999);
	initializeGenomicElement(g1, 80000,99999);
	initializeMutationRate(1e-7);
	initializeRecombinationRate(1e-8);
}

// each individual reproduces itself once
reproduction() {
	subpop.addCrossed(individual, subpop.sampleIndividuals(1));
}

// create an initial population of 10 individuals
1 early() {
	sim.addSubpop("p1", 10);
	sim.addSubpop("p2", 10);
	sim.addSubpop("p3", 10);
}

// let beneficial mutations arise in offspring
100 early() {
	mutant = sample(p1.individuals.genomes, 10);
	mutant.addNewDrawnMutation(m2, 10000);
}

// provide density-dependent selection
early() {
	p1.fitnessScaling = K / p1.individualCount;
	p2.fitnessScaling = K / p2.individualCount;
	p3.fitnessScaling = K / p3.individualCount;
}

// output all fixed mutations at end
2000 late() { sim.outputFixedMutations(); }
