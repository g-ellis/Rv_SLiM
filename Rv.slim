// nonWF model to examine life stage effects on MHC I and MHC II population genetics
// eventually adding community assemblage complexity

// if each tick isn't a year, need to add modulo/phase adjustment

// set up a simple neutral nonWF simulation
initialize() {
	initializeSLiMModelType("nonWF");
	defineConstant("K", 30);	// carrying capacity
	defineConstant("L", c(0.7, 0.0, 0.0, 0.0, 0.25, 0.5, 0.75, 1.0)); // life table for age-based mortality
	
	// neutral mutations, which are allowed to fix
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
	// beneficial mutations, which are allowed to fix
	initializeMutationType("m2", 0.5, "n", 0.1, 0.05);
	m1.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElementType("g2", m2, 1.0);
	initializeGenomicElement(g1, 0,19999);
	initializeGenomicElement(g2, 20000,39999);
	initializeGenomicElement(g1, 40000,59999);
	initializeGenomicElement(g2, 60000,79999);
	initializeGenomicElement(g1, 80000,99999);
	initializeMutationRate(1e-7);
	initializeRecombinationRate(1e-8);
}

// each individual reproduces once, and must be at least 3 ticks old
reproduction() {
	if (individual.age > 2) {
		mate = subpop.sampleIndividuals(1, minAge=3);
		subpop.addCrossed(individual, mate);
	}
}

// create an initial population of 10 individuals with multiple ages
1 early() {
	sim.addSubpop("p1", 10);
	p1.individuals.age = rdunif(10, min=0, max=7);
	//sim.addSubpop("p2", 10);
	//p2.individuals.age = rdunif(10, min=0, max=7);
	//sim.addSubpop("p3", 10);
	//p3.individuals.age = rdunif(10, min=0, max=7);
}


// let beneficial mutations arise in offspring
100 early() {
	mutant = sample(p1.individuals.genomes, 10);
	mutant.addNewDrawnMutation(m2, 10000);
}

// provide density-dependent selection
early() {
	// life table based individual mortality (note: make this into a loop)
	inds1 = p1.individuals;
	ages1 = inds1.age;
	mortality1 = L[ages1];
	survival1 = 1 - mortality1;
	inds1.fitnessScaling = survival1;
	
	//inds2 = p2.individuals;
	//ages2 = inds2.age;
	//mortality2 = L[ages2];
	//survival2 = 1 - mortality2;
	//inds2.fitnessScaling = survival2;
	
	//inds3 = p3.individuals;
	//ages3 = inds3.age;
	//mortality3 = L[ages3];
//	survival3 = 1 - mortality3;
//	inds3.fitnessScaling = survival3;
	
	// density-dependence, factoring in individual mortality
	p1.fitnessScaling = K / (p1.individualCount * mean(survival1));
//	p2.fitnessScaling = K / (p2.individualCount * mean(survival2));
//	p3.fitnessScaling = K / (p3.individualCount * mean(survival3));
}

// output all fixed mutations at end
2000 late() { sim.outputFixedMutations(); }
